// Top-level build file where you can add configuration options common to all
// sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.12.2'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:7.2.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.diffplug.spotless'

repositories {
    google()
    mavenCentral()
    maven { url='https://jitpack.io'}
}

configurations {
    playstoreImplementation
    freeImplementation
    chatFreeImplementation
    chatPlaystorImplementation
    chatPlaystoreImplementation
}

spotless {
    ratchetFrom '2.17.4'
    java {
        target '**/*.java'
        googleJavaFormat().aosp().reflowLongStrings()
    }
}


dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.5'

    annotationProcessor 'org.immutables:value:2.11.3'
    implementation 'org.immutables:value-annotations:2.11.3'
    annotationProcessor project(':libs:annotation-processor')
    implementation project(':libs:annotation')
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.concurrent:concurrent-futures:1.3.0'
    implementation 'androidx.documentfile:documentfile:1.1.0'
    implementation 'androidx.emoji2:emoji2:1.5.0'
    freeImplementation 'androidx.emoji2:emoji2-bundled:1.5.0'
    implementation 'androidx.emoji2:emoji2-emojipicker:1.5.0'
    implementation 'androidx.exifinterface:exifinterface:1.4.1'
    implementation 'androidx.heifwriter:heifwriter:1.1.0-rc01'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.sharetarget:sharetarget:1.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.viewpager:viewpager:1.1.0'
    implementation 'androidx.work:work-runtime:2.10.3'
    implementation 'com.github.open-keychain.open-keychain:openpgp-api:v5.7.1'
    implementation 'com.google.android.material:material:1.13.0'
    implementation 'com.google.guava:guava:33.4.8-android'
    implementation 'com.google.zxing:core:3.5.3'
    implementation 'com.leinardi.android:speed-dial:3.3.0'
    implementation 'com.makeramen:roundedimageview:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:3.0.0'
    implementation 'com.squareup.retrofit2:retrofit:3.0.0'
    implementation 'com.vanniktech:android-image-cropper:4.6.0'
    implementation 'im.conversations.webrtc:webrtc-android:129.0.0'
    implementation 'io.deepmedia.community:transcoder-android:0.11.2'
    implementation 'me.drakeet.support:toastcompat:1.1.0'
    implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
    implementation 'org.bouncycastle:bcmail-jdk18on:1.81'
    implementation 'org.conscrypt:conscrypt-android:2.5.3'
    implementation 'org.hsluv:hsluv:1.0'
    implementation 'org.jxmpp:jxmpp-jid:1.1.0'
    implementation 'org.jxmpp:jxmpp-stringprep-libidn:1.1.0'
    implementation 'org.minidns:minidns-client:1.1.1'
    implementation 'org.minidns:minidns-dnssec:1.1.1'
    implementation 'org.osmdroid:osmdroid-android:6.1.20'
    implementation 'org.whispersystems:signal-protocol-java:2.6.2'
    chatPlaystoreImplementation 'com.android.installreferrer:installreferrer:2.2'
    playstoreImplementation('com.google.firebase:firebase-messaging:25.0.0') {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'

    }

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.16'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'

}

ext {
    preDexEnabled = System.getProperty("pre-dex", "true")
    abiCodes = ['armeabi-v7a': 1, 'x86': 2, 'x86_64': 3, 'arm64-v8a': 4]
}

android {
    namespace 'tech.ravensoftware.chat'
    compileSdk 36

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 36
        versionCode 4
        versionName '1.1.0'
        archivesBaseName += "-$versionName"
        applicationId 'tech.ravensoftware.chat'
        resValue "string", "applicationId", applicationId
        def appName = "Chat"
        resValue "string", "app_name", appName
        buildConfigField "String", "APP_NAME", "\"$appName\""
    }

    splits {
        abi {
            universalApk true
            enable !project.hasProperty('android.injected.invoked.from.ide') && !gradle.startParameter.taskRequests.toString().contains('Bundle')
            reset()
            //noinspection ChromeOsAbiSupport
            include project.ext.abiCodes.keySet() as String[]
        }
    }

    configurations {
        implementation.exclude group: 'org.jetbrains' , module:'annotations'
    }

    dataBinding {
        enabled true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    flavorDimensions += "mode"
    flavorDimensions += "distribution"

    productFlavors {
        chat {
            dimension "mode"
            buildConfigField "String", "PRIVACY_POLICY", "\"https://conversations.im/privacy.html\""
        }

        playstore {
            dimension "distribution"
            versionNameSuffix "+playstore"
        }
        free {
            dimension "distribution"
            versionNameSuffix "+free"
        }
    }

    sourceSets {
        chatFree {
            java {
                srcDir 'src/chatFree/java'
            }
        }
        chatPlaystore {
            java {
                srcDir 'src/chatPlaystore/java'
            }
            res {
                srcDir 'src/chatPlaystore/res'
            }
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


    if (new File("signing.properties").exists()) {
        Properties props = new Properties()
        props.load(new FileInputStream(file("signing.properties")))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keystore.alias']
                keyPassword props['keystore.password']
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    }


    subprojects {

        afterEvaluate {
            if (getPlugins().hasPlugin('android') ||
                    getPlugins().hasPlugin('android-library')) {

                configure(android.lintOptions) {
                    disable 'AndroidGradlePluginVersion', 'MissingTranslation'
                }
            }

        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/BCKEY.DSA', 'META-INF/BCKEY.SF', 'META-INF/versions/9/OSGI-INF/MANIFEST.MF']
        }
    }
    lint {
        disable 'MissingTranslation', 'InvalidPackage', 'AppCompatResource'
    }
    buildFeatures {
        buildConfig true
    }

    android.applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI))
            if (baseAbiVersionCode != null) {
                output.versionCodeOverride = (100 * project.android.defaultConfig.versionCode) + baseAbiVersionCode
            } else {
                output.versionCodeOverride = 100 * project.android.defaultConfig.versionCode
            }
        }

    }
}
